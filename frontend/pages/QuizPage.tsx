import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
import { Question, Result, User } from '../types';

function QuizPage() {
  const { category, quizId } = useParams();
  const navigate = useNavigate();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);

  // Mock user data - will be replaced with actual user data from backend
  const user: User = {
    id: 1,
    nickname: "JohnDoe",
    email: "john@example.com",
    password: "",
    name: "John Doe",
    birth: new Date('1990-01-01'),
    role: "user",
    createdAt: new Date('2024-01-01'),
    results: []
  };

  // Example questions - in a real app, these would come from a database
  const questions: Question[] = [
    {
      id: 1,
      content: "Qual é a principal característica da Mata Atlântica?",
      createdAt: new Date(),
      updatedAt: new Date(),
      quizId: 1,
      answers: [
        {
          id: 1,
          content: "Alta biodiversidade",
          isCorrect: true,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 1
        },
        {
          id: 2,
          content: "Clima árido",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 1
        },
        {
          id: 3,
          content: "Vegetação rasteira",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 1
        },
        {
          id: 4,
          content: "Baixa pluviosidade",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 1
        }
      ]
    },
    {
      id: 2,
      content: "Qual destes animais é nativo da Mata Atlântica?",
      createdAt: new Date(),
      updatedAt: new Date(),
      quizId: 1,
      answers: [
        {
          id: 5,
          content: "Leão",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 2
        },
        {
          id: 6,
          content: "Mico-leão-dourado",
          isCorrect: true,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 2
        },
        {
          id: 7,
          content: "Girafa",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 2
        },
        {
          id: 8,
          content: "Zebra",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 2
        }
      ]
    },
    {
      id: 3,
      content: "Qual a porcentagem aproximada de Mata Atlântica que resta no Brasil?",
      createdAt: new Date(),
      updatedAt: new Date(),
      quizId: 1,
      answers: [
        {
          id: 9,
          content: "7%",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 3
        },
        {
          id: 10,
          content: "12.4%",
          isCorrect: true,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 3
        },
        {
          id: 11,
          content: "28.6%",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 3
        },
        {
          id: 12,
          content: "45.2%",
          isCorrect: false,
          createdAt: new Date(),
          updatedAt: new Date(),
          questionId: 3
        }
      ]
    }
  ];

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
  };

  const handleNextQuestion = () => {
    if (selectedAnswer !== null && questions[currentQuestion].answers) {
      const isCorrect = questions[currentQuestion].answers[selectedAnswer].isCorrect;
      if (isCorrect) {
        setScore(score + 1);
      }
    }

    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
    } else {
      setShowResult(true);
      // Here we would update the user's score in the backend
      const newResult: Result = {
        id: Math.random(), // This would be generated by the backend
        score: score,
        createdAt: new Date(),
        updatedAt: new Date(),
        user: user,
        quiz: {
          id: Number(quizId),
          title: "Quiz Title", // This would come from the backend
          theme: category || "",
          description: "Quiz Description", // This would come from the backend
          createdAt: new Date(),
          updatedAt: new Date(),
        }
      };
      
      // In a real app, this would be an API call to update the user's score
      console.log('Updating user score with result:', newResult);
    }
  };

  const handleExitQuiz = () => {
    const confirmExit = window.confirm('Tem certeza que deseja sair? Seu progresso será perdido.');
    if (confirmExit) {
      navigate(`/quizzes/${category}`);
    }
  };

  if (showResult) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-green-800/50 rounded-lg p-8 backdrop-blur-sm max-w-2xl mx-auto">
          <h2 className="text-3xl font-bold text-white mb-4">Resultado do Quiz</h2>
          <div className="bg-white rounded-lg p-6">
            <p className="text-2xl text-green-800 mb-4">
              Você acertou {score} de {questions.length} questões!
            </p>
            <p className="text-gray-600 mb-6">
              Porcentagem de acerto: {((score / questions.length) * 100).toFixed(1)}%
            </p>
            <div className="space-y-4">
              <button
                onClick={() => navigate('/profile')}
                className="w-full bg-green-600 text-white py-3 px-6 rounded-md hover:bg-green-700 transition-colors"
              >
                Ver Perfil
              </button>
              <button
                onClick={() => navigate('/')}
                className="w-full bg-white border border-green-600 text-green-600 py-3 px-6 rounded-md hover:bg-green-50 transition-colors"
              >
                Voltar para Início
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const currentQuestionData = questions[currentQuestion];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-green-800/50 rounded-lg p-8 backdrop-blur-sm max-w-2xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center space-x-4">
            <button
              onClick={handleExitQuiz}
              className="text-white hover:text-green-200 transition-colors flex items-center"
            >
              <ArrowLeft className="h-6 w-6" />
              <span className="ml-2">Sair do Quiz</span>
            </button>
            <h2 className="text-2xl font-bold text-white">Questão {currentQuestion + 1} de {questions.length}</h2>
          </div>
          <div className="text-white">
            Pontuação: {score}
          </div>
        </div>
        
        <div className="bg-white rounded-lg p-6">
          <p className="text-xl text-gray-800 mb-6">{currentQuestionData.content}</p>
          
          <div className="space-y-3">
            {currentQuestionData.answers?.map((answer, index) => (
              <button
                key={answer.id}
                onClick={() => handleAnswerSelect(index)}
                className={`w-full text-left p-4 rounded-lg transition-colors ${
                  selectedAnswer === index
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-100 hover:bg-gray-200 text-gray-800'
                }`}
              >
                {answer.content}
              </button>
            ))}
          </div>

          <button
            onClick={handleNextQuestion}
            disabled={selectedAnswer === null}
            className={`mt-6 w-full py-3 px-6 rounded-md transition-colors ${
              selectedAnswer === null
                ? 'bg-gray-300 cursor-not-allowed'
                : 'bg-green-600 hover:bg-green-700 text-white'
            }`}
          >
            {currentQuestion + 1 === questions.length ? 'Finalizar' : 'Próxima'}
          </button>
        </div>
      </div>
    </div>
  );
}

export default QuizPage;